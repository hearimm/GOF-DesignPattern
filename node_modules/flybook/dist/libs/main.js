'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _fsExtra = require('fs-extra');

var _path = require('path');

var _glob = require('glob');

var _glob2 = _interopRequireDefault(_glob);

var _recursiveCopy = require('recursive-copy');

var _recursiveCopy2 = _interopRequireDefault(_recursiveCopy);

var _del = require('del');

var _del2 = _interopRequireDefault(_del);

var _mkdirp = require('mkdirp');

var _mkdirp2 = _interopRequireDefault(_mkdirp);

var _deepAssign = require('deep-assign');

var _deepAssign2 = _interopRequireDefault(_deepAssign);

var _react = require('react');

var _server = require('react-dom/server');

var _routes = require('./routes');

var _routes2 = _interopRequireDefault(_routes);

var _mdLoader2 = require('./md-loader');

var _mdLoader3 = _interopRequireDefault(_mdLoader2);

var _document2 = require('./_document');

var _document3 = _interopRequireDefault(_document2);

var _App = require('../pages/App');

var _App2 = _interopRequireDefault(_App);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var pkg = {
  name: 'Flybook',
  description: 'Flybook',
  homepage: '',
  author: {},
  repository: {
    type: 'git',
    url: ''
  }
};


try {
  // https://wietse.loves.engineering/ignore-a-flowtype-error-on-a-specific-line-14cdfa70a739
  // $FlowFixMe
  pkg = (0, _deepAssign2.default)(pkg, require((0, _path.join)(process.cwd(), 'package.json').toString()));
} catch (e) {}

var Html = function Html(title) {
  var contents = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
  var markdown = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
  var root = arguments[3];
  var routes = arguments[4];
  var theme = arguments[5];
  var font = arguments[6];
  var codeStyle = arguments[7];

  return (0, _document3.default)({
    title: title,
    markdown: markdown,
    root: root,
    theme: theme,
    font: font,
    codeStyle: codeStyle,
    body: (0, _server.renderToStaticMarkup)((0, _react.createElement)(_App2.default, { title: title, contents: contents, toc: routes, pkg: pkg, root: root }))
  });
};

var makeIndexPage = function makeIndexPage(docDir, outDir, routes, theme, font, codeStyle) {
  var readme = process.cwd();
  var html = void 0;

  var loadIndex = function loadIndex(docDir) {
    return (0, _mdLoader3.default)((0, _path.join)(docDir, 'readme.md'));
  };

  if (!(0, _fsExtra.existsSync)((0, _path.join)(docDir, 'readme.md'))) {
    if (!(0, _fsExtra.existsSync)((0, _path.join)(process.cwd(), 'readme.md'))) {
      console.log('> No \'readme.md\' file found in ' + docDir + ' and project root');
      process.exit(1);
    }
  } else {
    readme = docDir;
  }

  var _loadIndex = loadIndex(readme),
      contents = _loadIndex.contents,
      markdown = _loadIndex.markdown;

  html = Html(pkg.name, contents, markdown, '', routes, theme, font, codeStyle);

  /* gen new files */
  (0, _fsExtra.writeFileSync)((0, _path.join)(outDir, 'index.html'), html, { encoding: 'utf8' });
};

exports.default = function (_ref) {
  var docDir = _ref.docDir,
      outDir = _ref.outDir,
      silent = _ref.silent,
      prod = _ref.prod,
      theme = _ref.theme,
      font = _ref.font,
      codeStyle = _ref.codeStyle;

  var routes = (0, _routes2.default)(docDir) || {};

  // if not production mode, homepage is '/' path
  if (!prod) {
    pkg.homepage = '/';
  }

  /* clean previous files */
  _del2.default.sync([(0, _path.join)(outDir, '**', '*')]);

  // create output directory
  _mkdirp2.default.sync(outDir);

  // make index page
  makeIndexPage(docDir, outDir, routes, theme, font, codeStyle);

  Object.keys(routes).forEach(function (key) {
    var subRoutes = routes[key] || {};

    for (var title in subRoutes) {
      var file = subRoutes[title];

      var outputDir = (0, _path.join)(outDir, (0, _path.dirname)(file));
      var outputFile = (0, _path.join)(outDir, file.replace(/\.md$/, '.html'));

      var _mdLoader = (0, _mdLoader3.default)((0, _path.join)(docDir, file)),
          contents = _mdLoader.contents,
          markdown = _mdLoader.markdown;

      var relativePath = (0, _path.relative)(outputDir, outDir);
      relativePath = relativePath === '' ? '.' : relativePath;

      var html = Html(title, contents, markdown, relativePath + _path.sep, routes, theme, font, codeStyle);

      /* mkdir output dir */
      _mkdirp2.default.sync(outputDir);

      /* gen new files */
      (0, _fsExtra.writeFileSync)(outputFile, html, { encoding: 'utf8' });

      // log
      if (!silent) {
        console.log('>', key, '-', title, '\n', outputFile);
      }
    }
  });

  /* copy static assets */
  (0, _recursiveCopy2.default)((0, _path.join)(__dirname, '..', '..', 'static'), (0, _path.join)(outDir, 'static')).then(function (result) {
    console.log('> FlyBook was generated at ' + outDir);
  });

  /* copy assets which is used in docs */
  var files = _glob2.default.sync((0, _path.join)(docDir, '**', '!(*.md|*.markdown|*.mdown|*.mkdn|*.mkd|*.mdwn|*.mkdown|toc.yml)'), {
    ignore: [(0, _path.join)(docDir, 'node_modules', '**')],
    nodir: true
  });
  files.map(function (file) {
    return (0, _path.normalize)(file);
  }).forEach(function (file) {
    (0, _fsExtra.copySync)(file, file.replace(docDir, outDir));
  });
};