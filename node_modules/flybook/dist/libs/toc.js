'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.overwriteTOC = exports.writeTOC = exports.updateTOC = undefined;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _glob = require('glob');

var _glob2 = _interopRequireDefault(_glob);

var _del = require('del');

var _del2 = _interopRequireDefault(_del);

var _titleize2 = require('titleize');

var _titleize3 = _interopRequireDefault(_titleize2);

var _json2yaml = require('json2yaml');

var _json2yaml2 = _interopRequireDefault(_json2yaml);

var _jsYaml = require('js-yaml');

var _jsYaml2 = _interopRequireDefault(_jsYaml);

var _deepAssign = require('deep-assign');

var _deepAssign2 = _interopRequireDefault(_deepAssign);

var _unslug = require('./unslug');

var _unslug2 = _interopRequireDefault(_unslug);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// simple object deep compare
var compare = function compare(obj1, obj2) {
  return JSON.stringify(obj1) === JSON.stringify(obj2);
};

// remove properties of source object that dest object have not attribute
var clean = function clean(source, dest) {
  for (var attr in source) {
    if (_typeof(source[attr]) !== 'object') {
      if (!dest.hasOwnProperty(attr)) {
        delete source[attr];
      }
    } else {
      clean(source[attr], dest[attr]);
    }
  }

  return source;
};

// clean merge after deep assign
var cleanMerge = function cleanMerge(source, dest) {
  var deep = (0, _deepAssign2.default)({}, source, dest);
  deep = clean(deep, dest);

  return deep;
};

var gen = function gen(docDir) {
  var toc = {};
  // const files: string[] = glob.sync(join(docDir, '**', '*.md'), {
  var files = _glob2.default.sync((0, _path.join)(docDir, '**', '*.*'), {
    ignore: [(0, _path.join)(docDir, 'node_modules', '**')],
    nodir: true
  });

  files.filter(function (file) {
    return (/\.(md|markdown|mdown|mkdn|mkd|mdwn|mkdown)$/.test(file)
    );
  }).map(function (file) {
    return (0, _path.normalize)(file);
  }).filter(function (file) {
    return file !== (0, _path.join)(docDir, 'readme.md'); // basically readme.md is index file of directory
  }).forEach(function (file) {
    file = file.replace(docDir, '').substr(1, file.length);
    var dir = (0, _unslug2.default)((0, _path.dirname)(file));
    var name = (0, _unslug2.default)((0, _path.basename)(file).replace(/\.md$/, ''));

    /*
     * Parent Directory:
     *   Child Directory: File Path
     *
     * Basic:
     *   Getting Started: 'basic/getting-started.md'
     *
     */
    if (toc.hasOwnProperty(dir)) {
      toc[dir] = Object.assign(toc[dir], _defineProperty({}, (0, _titleize3.default)(name), file));
    } else {
      toc = Object.assign(toc, _defineProperty({}, (0, _titleize3.default)(dir), _defineProperty({}, (0, _titleize3.default)(name), file)));
    }
  });

  return toc;
};

var updateTOC = exports.updateTOC = function updateTOC(docDir) {
  var tocFile = (0, _path.join)(docDir, 'toc.yml');
  var has = _fs2.default.existsSync(tocFile);
  var json = gen(docDir);

  if (has) {
    var toc = _fs2.default.readFileSync(tocFile, 'utf8');
    var tocJson = _jsYaml2.default.safeLoad(toc);

    if (!compare(tocJson, json)) {
      save(tocFile, cleanMerge(tocJson, json));
    }
  }
};

var save = function save(file, json) {
  _fs2.default.writeFileSync(file, _json2yaml2.default.stringify(json), {
    encoding: 'utf8'
  });
};

var writeTOC = exports.writeTOC = function writeTOC(docDir) {
  var json = gen(docDir);
  var out = (0, _path.join)(docDir, 'toc.yml');

  save(out, json);
};

var overwriteTOC = exports.overwriteTOC = function overwriteTOC(docDir) {
  var json = gen(docDir);
  var out = (0, _path.join)(docDir, 'toc.yml');

  _del2.default.sync([out]);
  save(out, json);
};